name: SQS Project

permissions:
  contents: read
  packages: write
  
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint_dockerfiles:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/src/main/docker/Dockerfile.jvm

      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile
          
  build_analyze_push_test:
    runs-on: ubuntu-latest
    needs: lint_dockerfiles
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres        
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: sqs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Build backend with Maven
        run: mvn -B package --file backend/pom.xml

      - name: Run SonarCloud Analysis for Backend
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=sqs-project_sqs-backend -Dsonar.organization=sqs-project -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }}

      - name: Use Node.js 18.17
        uses: actions/setup-node@v2
        with:
          node-version: '18.17'

      - name: Cache Node.js packages
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node
        
      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Build Angular app with npm
        working-directory: frontend
        run: npm run build

      - name: Test with coverage
        working-directory: frontend
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage

      - name: Verify Coverage Report
        working-directory: frontend
        run: |
          echo "Listing files in the coverage directory"
          ls -l coverage
          echo "Displaying lcov.info content"
          cat coverage/lcov.info

      - name: Run SonarCloud Analysis for Frontend
        working-directory: frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: npx sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Prepare lowercase variables
        run: echo "LOWER_REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/src/main/docker/Dockerfile.jvm
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_backend:latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_frontend:latest

      - name: Stop and remove any running containers
        run: |
          docker ps -q | xargs docker stop
          docker ps -aq | xargs docker rm
    
      - name: Start Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      - name: Wait for services to start
        run: sleep 15

      - name: Run Artillery Tests
        if: success()
        run: |
          npm install -g artillery
          artillery run artillery-tests/artillery.yml
  
      - name: Build playwright with npm
        working-directory: playwright
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Frontend/End-to-End-Tests
        run: |
          cd playwright
          npx playwright test --config playwright.config.js
